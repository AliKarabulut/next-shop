// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                   String                 @unique
  emailVerified           DateTime?
  password                String
  name                    String?
  address                 String?
  phoneNumber             String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  role                    UserRole               @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?
}

model Product {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  name                  String      @unique
  brand                 String
  variations            Variation[]
  categoryId            String      @db.ObjectId
  category              Category    @relation(fields: [categoryId], references: [id])
}

model Variation {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String    @db.ObjectId
  options         String[]
  price           Float
  stock           Int
  discountPrice   Float?
  discountStart   DateTime?
  discountEnd     DateTime?
  discountRate    Int?
  images          String[]
}

model Option {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  type        String
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  products    Product[]
}

model Slider {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  description String
  order       Int    @default(0)
  imageUrl   String
  imageAlt   String
}
// AUTH

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String
  oldEmail String?
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model EmailChangeToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
